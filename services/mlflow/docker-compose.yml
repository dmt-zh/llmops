services:
  postgres:
    image: postgres:17
    container_name: mlflow-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${CACHE_STORAGE_DIR:-./opt}/mlflow/pgdata:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 10


  minio:
    image: minio/minio:latest
    container_name: mlflow-s3
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ${CACHE_STORAGE_DIR:-./opt}/mlflow/s3:/data
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 20


  create-bucket:
    image: minio/mc:latest
    container_name: s3_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c '
        mc alias set myminio http://${MINIO_HOST}:${MINIO_PORT} \
          ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
        mc mb --ignore-existing myminio/${MINIO_BUCKET:-mlflow}
      '
    restart: no


  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow-server
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      create-bucket:
        condition: service_completed_successfully
    ports:
      - 5000:5000
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      MLFLOW_S3_ENDPOINT_URL: http://${MINIO_HOST}:${MINIO_PORT}
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: us-east-1
      MLFLOW_S3_IGNORE_TLS: "true"
      MLFLOW_HOST: 0.0.0.0
      MLFLOW_PORT: 5000

    command: >
      /bin/bash -c "
        pip install --no-cache-dir psycopg2-binary boto3 &&
        mlflow server \
          --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} \
          --default-artifact-root s3://${MINIO_BUCKET} \
          --host 0.0.0.0 \
          --port 5000
      "
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:5000/health')",
        ]
      interval: 10s
      timeout: 5s
      retries: 30


networks:
  default:
    name: mlflow-network
